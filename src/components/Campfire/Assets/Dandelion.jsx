/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 dandelion.glb
*/

import React from 'react'
import { useGLTF } from '@react-three/drei'

export function DandelionA() {
  const { nodes, materials } = useGLTF('/3D/dandelion/dandelion.glb')


  const scaledGeometry = React.useMemo(() => {
    const geom = nodes.dandelion_01_a_LOD3.geometry.clone();
    geom.scale(6, 6, 6); // Example: Scale down by half
    geom.computeVertexNormals(); // Recompute normals after scaling
    return geom;
  }, [nodes.dandelion_01_a_LOD3.geometry]);
  return {
    geometry: scaledGeometry,
    material: materials.dandelion_01,
  }
}
export function DandelionB() {
  const { nodes, materials } = useGLTF('/3D/dandelion/dandelion.glb')


  const scaledGeometry = React.useMemo(() => {
    const geom = nodes.dandelion_01_b_LOD3.geometry.clone();
    geom.scale(6, 6, 6); // Example: Scale down by half
    geom.computeVertexNormals(); // Recompute normals after scaling
    return geom;
  }, [nodes.dandelion_01_b_LOD3.geometry]);
  return {
    geometry: scaledGeometry,
    material: materials.dandelion_01,
  }
}
export function DandelionC() {
  const { nodes, materials } = useGLTF('/3D/dandelion/dandelion.glb')


  const scaledGeometry = React.useMemo(() => {
    const geom = nodes.dandelion_01_e_LOD3.geometry.clone();
    geom.scale(6, 6, 6); // Example: Scale down by half
    geom.computeVertexNormals(); // Recompute normals after scaling
    return geom;
  }, [nodes.dandelion_01_e_LOD3.geometry]);
  return {
    geometry: scaledGeometry,
    material: materials.dandelion_01,
  }
}

useGLTF.preload('/3D/dandelion/dandelion.glb')
